{"version":3,"sources":["helpers/useQuery.js","pages/ResetPassword.jsx"],"names":["useQuery","URLSearchParams","useLocation","search","ResetPassword","useState","msg","setMsg","resetmsg","setResetMsg","isResetting","setIsResetting","history","useHistory","query","token","get","email","useForm","register","handleSubmit","errors","watch","password","useRef","current","useEffect","authService","checkToken","then","data","catch","e","console","error","response","Layout","title","showForm","className","onSubmit","resetPassword","password2","status","toast","success","message","setTimeout","push","err","type","inputMode","name","ref","required","minLength","value","valid","validate","disabled","size","color"],"mappings":"4JAMeA,MAJf,WACE,OAAO,IAAIC,gBAAgBC,cAAcC,S,uCC+H5BC,UAxHO,WAAO,IAAD,EACJC,mBAAS,IADL,mBACnBC,EADmB,KACdC,EADc,OAEMF,mBAAS,IAFf,mBAEnBG,EAFmB,KAETC,EAFS,OAGYJ,oBAAS,GAHrB,mBAGnBK,EAHmB,KAGNC,EAHM,KAIpBC,EAAUC,cACVC,EAAQd,IACRe,EAAQD,EAAME,IAAI,SAClBC,EAAQH,EAAME,IAAI,SAPE,EAQwBE,cAA1CC,EARkB,EAQlBA,SAAUC,EARQ,EAQRA,aAAcC,EARN,EAQMA,OAAQC,EARd,EAQcA,MAClCC,EAAWC,iBAAO,IACxBD,EAASE,QAAUH,EAAM,WAAY,IAErCI,qBAAU,WACRC,IACGC,WAAWb,EAAOE,GAClBY,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcvB,EAAOuB,MAC1BC,OAAM,SAACC,GAAD,OAAOC,QAAQC,MAAMF,EAAEG,eAC/B,CAACpB,EAAOE,IAqBX,OACE,cAACmB,EAAA,EAAD,CAAQC,MAAM,iBAAd,SACG/B,EAAIgC,SACH,sBAAKC,UAAU,QAAf,UACE,wBAAQA,UAAU,wBAAlB,SACE,oBAAIA,UAAU,iCAAd,8BAEF,qBAAKA,UAAU,0CAAf,SACE,uBACEA,UAAU,gBACVC,SAAUpB,GA7BM,SAACU,GAC3BnB,GAAe,GACfgB,IACGc,cAAc1B,EAAOE,EAAOa,EAAKP,SAAUO,EAAKY,WAChDb,MAAK,YAAe,IAAZC,EAAW,EAAXA,KACP,GAAoB,UAAhBA,EAAKa,OAGP,OAFAhC,GAAe,QACfF,EAAYqB,GAGdc,IAAMC,QAAQf,EAAKgB,SACnBC,YAAW,WACTnC,EAAQoC,KAAK,YACZ,QAEJjB,OAAM,SAACkB,GACNtC,GAAe,SAWX,UAIE,eAAC,QAAD,CAAO4B,UAAU,OAAjB,UACE,sBAAMA,UAAU,6CAAhB,sBAGA,cAAC,QAAD,CACEA,UAAU,mHACVW,KAAK,WACLC,UAAU,WACVC,KAAK,WACLC,IAAKlC,EAAS,CACZmC,SAAU,2BACVC,UAAW,CACTC,MAAO,EACPV,QAAS,kDAIdzB,EAAOE,UAAqC,aAAzBF,EAAOE,SAAS2B,MAClC,cAAC,aAAD,CAAYX,UAAU,OAAOkB,OAAO,EAApC,SACGjD,EAASsC,UAGbzB,EAAOE,UAAqC,cAAzBF,EAAOE,SAAS2B,MAClC,cAAC,aAAD,CAAYX,UAAU,OAAOkB,OAAO,EAApC,SACGjD,EAASsC,aAIhB,eAAC,QAAD,CAAOP,UAAU,OAAjB,UACE,sBAAMA,UAAU,6CAAhB,8BAGA,cAAC,QAAD,CACEA,UAAU,mHACVW,KAAK,WACLC,UAAU,WACVC,KAAK,YACLC,IAAKlC,EAAS,CACZuC,SAAU,SAACF,GAAD,OACRA,IAAUjC,EAASE,SAAW,iCAIrCJ,EAAOE,UAAqC,aAAzBF,EAAOE,SAAS2B,MAClC,cAAC,aAAD,CAAYX,UAAU,OAAOkB,OAAO,EAApC,SACGjD,EAASsC,UAGbtC,GACC,cAAC,aAAD,CAAY+B,UAAU,OAAOkB,OAAO,EAApC,SACGjD,EAASsC,SAAW,KAGzB,cAAC,SAAD,CAAQI,KAAK,SAASS,SAAUjD,EAAhC,SACGA,EACC,cAAC,IAAD,CAAakD,KAAM,GAAIC,MAAO,YAE9B,2BAOV,8BAAMvD,EAAIwC","file":"static/js/12.f22a529b.chunk.js","sourcesContent":["import { useLocation } from \"react-router-dom\";\r\n\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nexport default useQuery;\r\n","import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\nimport useQuery from \"helpers/useQuery\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst ResetPassword = () => {\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [resetmsg, setResetMsg] = useState(\"\");\r\n  const [isResetting, setIsResetting] = useState(false);\r\n  const history = useHistory();\r\n  const query = useQuery();\r\n  const token = query.get(\"token\");\r\n  const email = query.get(\"email\");\r\n  const { register, handleSubmit, errors, watch } = useForm();\r\n  const password = useRef({});\r\n  password.current = watch(\"password\", \"\");\r\n\r\n  useEffect(() => {\r\n    authService\r\n      .checkToken(token, email)\r\n      .then(({ data }) => setMsg(data))\r\n      .catch((e) => console.error(e.response));\r\n  }, [token, email]);\r\n\r\n  const handlePasswordReset = (data) => {\r\n    setIsResetting(true);\r\n    authService\r\n      .resetPassword(token, email, data.password, data.password2)\r\n      .then(({ data }) => {\r\n        if (data.status === \"error\") {\r\n          setIsResetting(false);\r\n          setResetMsg(data);\r\n          return;\r\n        }\r\n        toast.success(data.message);\r\n        setTimeout(() => {\r\n          history.push(\"/login\");\r\n        }, 2000);\r\n      })\r\n      .catch((err) => {\r\n        setIsResetting(false);\r\n      });\r\n  };\r\n  return (\r\n    <Layout title=\"Reset Password\">\r\n      {msg.showForm ? (\r\n        <div className=\"pt-12\">\r\n          <header className=\"max-w-lg mx-auto mb-4\">\r\n            <h1 className=\"text-4xl font-bold text-center\">Reset Password</h1>\r\n          </header>\r\n          <div className=\"mx-auto max-w-lg shadow-2xl p-8 md:p-10\">\r\n            <form\r\n              className=\"flex flex-col\"\r\n              onSubmit={handleSubmit(handlePasswordReset)}\r\n            >\r\n              <Label className=\"mb-4\">\r\n                <span className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                  Password\r\n                </span>\r\n                <Input\r\n                  className=\"rounded w-full text-gray-700 focus:outline-none border px-2 py-2 focus:border-purple-600 transition duration-500\"\r\n                  type=\"password\"\r\n                  inputMode=\"password\"\r\n                  name=\"password\"\r\n                  ref={register({\r\n                    required: \"Password cannot be empty\",\r\n                    minLength: {\r\n                      value: 6,\r\n                      message: \"Password must be greater than 5 characters\",\r\n                    },\r\n                  })}\r\n                />\r\n                {errors.password && errors.password.type === \"required\" && (\r\n                  <HelperText className=\"pt-2\" valid={false}>\r\n                    {resetmsg.message}\r\n                  </HelperText>\r\n                )}\r\n                {errors.password && errors.password.type === \"minLength\" && (\r\n                  <HelperText className=\"pt-2\" valid={false}>\r\n                    {resetmsg.message}\r\n                  </HelperText>\r\n                )}\r\n              </Label>\r\n              <Label className=\"mb-4\">\r\n                <span className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                  Confirm Password\r\n                </span>\r\n                <Input\r\n                  className=\"rounded w-full text-gray-700 focus:outline-none border px-2 py-2 focus:border-purple-600 transition duration-500\"\r\n                  type=\"password\"\r\n                  inputMode=\"password\"\r\n                  name=\"password2\"\r\n                  ref={register({\r\n                    validate: (value) =>\r\n                      value === password.current || \"Passwords do not match\",\r\n                  })}\r\n                />\r\n              </Label>\r\n              {errors.password && errors.password.type === \"required\" && (\r\n                <HelperText className=\"pt-2\" valid={false}>\r\n                  {resetmsg.message}\r\n                </HelperText>\r\n              )}\r\n              {resetmsg && (\r\n                <HelperText className=\"pt-2\" valid={false}>\r\n                  {resetmsg.message || \"\"}\r\n                </HelperText>\r\n              )}\r\n              <Button type=\"submit\" disabled={isResetting}>\r\n                {isResetting ? (\r\n                  <PulseLoader size={10} color={\"#0a138b\"} />\r\n                ) : (\r\n                  \"Reset Password\"\r\n                )}\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>{msg.message}</div>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"],"sourceRoot":""}