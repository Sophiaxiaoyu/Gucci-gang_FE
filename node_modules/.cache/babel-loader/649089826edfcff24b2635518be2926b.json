{"ast":null,"code":"/**\n * 获取分类字段 key 值 一个分类值的时候， 返回非索引 key 值，在 tooltip 不做索引区分\n * @param values 数据量\n * @param field 指标字段\n * @param index 索引\n * @returns string\n */\nfunction getSeriesFieldKey(values, field, index) {\n  return values.length > 1 ? field + \"_\" + index : \"\" + field;\n}\n/**\n * bullet 处理数据\n * @param options\n */\n\n\nexport function transformData(options) {\n  var data = options.data,\n      xField = options.xField,\n      measureField = options.measureField,\n      rangeField = options.rangeField,\n      targetField = options.targetField,\n      layout = options.layout;\n  var ds = [];\n  var scales = [];\n  data.forEach(function (item, index) {\n    // 构建 title * range\n    var rangeValues = [item[rangeField]].flat();\n    rangeValues.sort(function (a, b) {\n      return a - b;\n    });\n    rangeValues.forEach(function (d, i) {\n      var _a;\n\n      var range = i === 0 ? d : rangeValues[i] - rangeValues[i - 1];\n      ds.push((_a = {\n        rKey: rangeField + \"_\" + i\n      }, _a[xField] = xField ? item[xField] : String(index), _a[rangeField] = range, _a));\n    }); // 构建 title * measure\n\n    var measureValues = [item[measureField]].flat();\n    measureValues.forEach(function (d, i) {\n      var _a;\n\n      ds.push((_a = {\n        mKey: getSeriesFieldKey(measureValues, measureField, i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[measureField] = d, _a));\n    }); // 构建 title * target\n\n    var targetValues = [item[targetField]].flat();\n    targetValues.forEach(function (d, i) {\n      var _a;\n\n      ds.push((_a = {\n        tKey: getSeriesFieldKey(targetValues, targetField, i)\n      }, _a[xField] = xField ? item[xField] : String(index), _a[targetField] = d, _a));\n    }); // 为了取最大值和最小值，先存储\n\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  }); // scales 是嵌套的需要拍平\n\n  var min = Math.min.apply(Math, scales.flat(Infinity));\n  var max = Math.max.apply(Math, scales.flat(Infinity)); // min 大于 0 从 0 开始\n\n  min = min > 0 ? 0 : min; // 垂直情况，需要反转数据\n\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n\n  return {\n    min: min,\n    max: max,\n    ds: ds\n  };\n}","map":{"version":3,"sources":["../../../src/plots/bullet/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { BulletOptions } from './types';\n\ntype TransformData = {\n  min: number;\n  max: number;\n  ds: any[];\n};\n\n/**\n * 获取分类字段 key 值 一个分类值的时候， 返回非索引 key 值，在 tooltip 不做索引区分\n * @param values 数据量\n * @param field 指标字段\n * @param index 索引\n * @returns string\n */\nfunction getSeriesFieldKey(values: number[], field: string, index: number): string {\n  return values.length > 1 ? `${field}_${index}` : `${field}`;\n}\n\n/**\n * bullet 处理数据\n * @param options\n */\nexport function transformData(options: BulletOptions): TransformData {\n  const { data, xField, measureField, rangeField, targetField, layout } = options;\n  const ds: any[] = [];\n  const scales: number[] = [];\n  data.forEach((item: any, index: number) => {\n    // 构建 title * range\n    const rangeValues = [item[rangeField]].flat();\n    rangeValues.sort((a: number, b: number) => a - b);\n    rangeValues.forEach((d: number, i: number) => {\n      const range = i === 0 ? d : rangeValues[i] - rangeValues[i - 1];\n      ds.push({\n        rKey: `${rangeField}_${i}`,\n        [xField]: xField ? item[xField] : String(index), // 没有xField就用索引\n        [rangeField]: range,\n      });\n    });\n\n    // 构建 title * measure\n    const measureValues = [item[measureField]].flat();\n    measureValues.forEach((d: number, i: number) => {\n      ds.push({\n        mKey: getSeriesFieldKey(measureValues, measureField, i),\n        [xField]: xField ? item[xField] : String(index),\n        [measureField]: d,\n      });\n    });\n\n    // 构建 title * target\n    const targetValues = [item[targetField]].flat();\n    targetValues.forEach((d: number, i: number) => {\n      ds.push({\n        tKey: getSeriesFieldKey(targetValues, targetField, i),\n        [xField]: xField ? item[xField] : String(index),\n        [targetField]: d,\n      });\n    });\n\n    // 为了取最大值和最小值，先存储\n    scales.push(item[rangeField], item[measureField], item[targetField]);\n  });\n  // scales 是嵌套的需要拍平\n  let min = Math.min(...scales.flat(Infinity));\n  const max = Math.max(...scales.flat(Infinity));\n  // min 大于 0 从 0 开始\n  min = min > 0 ? 0 : min;\n\n  // 垂直情况，需要反转数据\n  if (layout === 'vertical') {\n    ds.reverse();\n  }\n  return { min, max, ds };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}