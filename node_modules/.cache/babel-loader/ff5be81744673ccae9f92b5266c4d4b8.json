{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { Plot } from '../../core/plot';\nimport { getDataWhetherPercentage } from '../../utils/transform/percent';\nimport { adaptor, meta } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constants';\n/**\n * 条形图\n */\n\nvar Bar =\n/** @class */\nfunction (_super) {\n  __extends(Bar, _super);\n\n  function Bar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /** 图表类型 */\n\n\n    _this.type = 'bar';\n    return _this;\n  }\n  /**\n   * 获取 条形图 默认配置项\n   * 供外部使用\n   */\n\n\n  Bar.getDefaultOptions = function () {\n    return DEFAULT_OPTIONS;\n  };\n  /**\n   * @override\n   */\n\n\n  Bar.prototype.changeData = function (data) {\n    var _a, _b;\n\n    this.updateOption({\n      data: data\n    });\n\n    var _c = this,\n        chart = _c.chart,\n        options = _c.options;\n\n    var isPercent = options.isPercent;\n    var xField = options.xField,\n        yField = options.yField,\n        xAxis = options.xAxis,\n        yAxis = options.yAxis;\n    _a = [yField, xField], xField = _a[0], yField = _a[1];\n    _b = [yAxis, xAxis], xAxis = _b[0], yAxis = _b[1];\n\n    var switchedFieldOptions = __assign(__assign({}, options), {\n      xField: xField,\n      yField: yField,\n      yAxis: yAxis,\n      xAxis: xAxis\n    });\n\n    meta({\n      chart: chart,\n      options: switchedFieldOptions\n    });\n    chart.changeData(getDataWhetherPercentage(data, xField, yField, xField, isPercent));\n  };\n  /**\n   * 获取 条形图 默认配置\n   */\n\n\n  Bar.prototype.getDefaultOptions = function () {\n    return Bar.getDefaultOptions();\n  };\n  /**\n   * 获取 条形图 的适配器\n   */\n\n\n  Bar.prototype.getSchemaAdaptor = function () {\n    return adaptor;\n  };\n\n  return Bar;\n}(Plot);\n\nexport { Bar };","map":{"version":3,"sources":["../../../src/plots/bar/index.ts"],"names":[],"mappings":";AAAA,SAAS,IAAT,QAAqB,iBAArB;AAEA,SAAS,wBAAT,QAAyC,+BAAzC;AAEA,SAAS,OAAT,EAAkB,IAAlB,QAA8B,WAA9B;AACA,SAAS,eAAT,QAAgC,aAAhC;AAIA;;AAEG;;AACH,IAAA,GAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyB,EAAA,SAAA,CAAA,GAAA,EAAA,MAAA,CAAA;;AAAzB,WAAA,GAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;AASE;;;AACgB,IAAA,KAAA,CAAA,IAAA,GAAe,KAAf;;AA8BjB;AAvCC;;;AAGG;;;AACI,EAAA,GAAA,CAAA,iBAAA,GAAP,YAAA;AACE,WAAO,eAAP;AACD,GAFM;AAOP;;AAEG;;;AACI,EAAA,GAAA,CAAA,SAAA,CAAA,UAAA,GAAP,UAAkB,IAAlB,EAA0C;;;AACxC,SAAK,YAAL,CAAkB;AAAE,MAAA,IAAI,EAAA;AAAN,KAAlB;;AACM,QAAA,EAAA,GAAqB,IAArB;AAAA,QAAE,KAAK,GAAA,EAAA,CAAA,KAAP;AAAA,QAAS,OAAO,GAAA,EAAA,CAAA,OAAhB;;AACE,QAAA,SAAS,GAAK,OAAO,CAAZ,SAAT;AACF,QAAA,MAAM,GAA2B,OAAO,CAAlC,MAAN;AAAA,QAAQ,MAAM,GAAmB,OAAO,CAA1B,MAAd;AAAA,QAAgB,KAAK,GAAY,OAAO,CAAnB,KAArB;AAAA,QAAuB,KAAK,GAAK,OAAO,CAAZ,KAA5B;AACN,IAAA,EAAA,GAAmB,CAAC,MAAD,EAAS,MAAT,CAAnB,EAAC,MAAM,GAAA,EAAA,CAAA,CAAA,CAAP,EAAS,MAAM,GAAA,EAAA,CAAA,CAAA,CAAf;AACA,IAAA,EAAA,GAAiB,CAAC,KAAD,EAAQ,KAAR,CAAjB,EAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN,EAAQ,KAAK,GAAA,EAAA,CAAA,CAAA,CAAb;;AACA,QAAM,oBAAoB,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,OAAR,CAAA,EAAe;AAAE,MAAA,MAAM,EAAA,MAAR;AAAU,MAAA,MAAM,EAAA,MAAhB;AAAkB,MAAA,KAAK,EAAA,KAAvB;AAAyB,MAAA,KAAK,EAAA;AAA9B,KAAf,CAA1B;;AACA,IAAA,IAAI,CAAC;AAAE,MAAA,KAAK,EAAA,KAAP;AAAS,MAAA,OAAO,EAAE;AAAlB,KAAD,CAAJ;AACA,IAAA,KAAK,CAAC,UAAN,CAAiB,wBAAwB,CAAC,IAAD,EAAO,MAAP,EAAe,MAAf,EAAuB,MAAvB,EAA+B,SAA/B,CAAzC;AACD,GAVM;AAYP;;AAEG;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,iBAAA,GAAV,YAAA;AACE,WAAO,GAAG,CAAC,iBAAJ,EAAP;AACD,GAFS;AAIV;;AAEG;;;AACO,EAAA,GAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACE,WAAO,OAAP;AACD,GAFS;;AAGZ,SAAA,GAAA;AAAC,CAxCD,CAAyB,IAAzB,CAAA","sourcesContent":["import { Plot } from '../../core/plot';\nimport { Adaptor } from '../../core/adaptor';\nimport { getDataWhetherPercentage } from '../../utils/transform/percent';\nimport { BarOptions } from './types';\nimport { adaptor, meta } from './adaptor';\nimport { DEFAULT_OPTIONS } from './constants';\n\nexport type { BarOptions };\n\n/**\n * 条形图\n */\nexport class Bar extends Plot<BarOptions> {\n  /**\n   * 获取 条形图 默认配置项\n   * 供外部使用\n   */\n  static getDefaultOptions(): Partial<BarOptions> {\n    return DEFAULT_OPTIONS;\n  }\n\n  /** 图表类型 */\n  public readonly type: string = 'bar';\n\n  /**\n   * @override\n   */\n  public changeData(data: BarOptions['data']) {\n    this.updateOption({ data });\n    const { chart, options } = this;\n    const { isPercent } = options;\n    let { xField, yField, xAxis, yAxis } = options;\n    [xField, yField] = [yField, xField];\n    [xAxis, yAxis] = [yAxis, xAxis];\n    const switchedFieldOptions = { ...options, xField, yField, yAxis, xAxis };\n    meta({ chart, options: switchedFieldOptions });\n    chart.changeData(getDataWhetherPercentage(data, xField, yField, xField, isPercent));\n  }\n\n  /**\n   * 获取 条形图 默认配置\n   */\n  protected getDefaultOptions() {\n    return Bar.getDefaultOptions();\n  }\n\n  /**\n   * 获取 条形图 的适配器\n   */\n  protected getSchemaAdaptor(): Adaptor<BarOptions> {\n    return adaptor;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}