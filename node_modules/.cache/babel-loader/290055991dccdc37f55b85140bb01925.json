{"ast":null,"code":"import { isFunction } from '@antv/util';\n\nvar MyWorker =\n/** @class */\nfunction () {\n  function MyWorker(url) {\n    var _this = this;\n\n    this.queue = [];\n    this.worker = new Worker(url);\n\n    this.worker.onmessage = function (e) {\n      var _a;\n\n      (_a = _this.queue.shift()) === null || _a === void 0 ? void 0 : _a.resolve(e);\n    };\n\n    this.worker.onmessageerror = function (e) {\n      var _a;\n\n      console.warn('[AntV G2] Web worker is not available');\n      (_a = _this.queue.shift()) === null || _a === void 0 ? void 0 : _a.reject(e);\n    };\n  }\n\n  MyWorker.prototype.post = function (params, onError) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      _this.queue.push({\n        resolve: resolve,\n        reject: reject\n      });\n\n      try {\n        _this.worker.postMessage(params);\n      } catch (e) {\n        console.warn('[AntV G2] Web worker is not available');\n        isFunction(onError) && onError();\n      }\n    });\n  };\n\n  MyWorker.prototype.destroy = function () {\n    this.worker.terminate();\n  };\n\n  return MyWorker;\n}();\n\nexport function createWorker(f) {\n  if (typeof window === 'undefined') return;\n  var blob;\n\n  try {\n    blob = new Blob([f.toString()], {\n      type: 'application/javascript'\n    });\n  } catch (e) {\n    // @ts-ignore\n    blob = new window.BlobBuilder();\n    blob.append(f.toString());\n    blob = blob.getBlob();\n  }\n\n  return new MyWorker(URL.createObjectURL(blob));\n}","map":{"version":3,"sources":["../../../../src/geometry/label/util/createWorker.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,YAA3B;;AAEA,IAAA,QAAA;AAAA;AAAA,YAAA;AAIE,WAAA,QAAA,CAAY,GAAZ,EAAe;AAAf,QAAA,KAAA,GAAA,IAAA;;AAHA,SAAA,KAAA,GAAe,EAAf;AAIE,SAAK,MAAL,GAAc,IAAI,MAAJ,CAAW,GAAX,CAAd;;AACA,SAAK,MAAL,CAAY,SAAZ,GAAwB,UAAC,CAAD,EAAgB;;;AACtC,OAAA,EAAA,GAAA,KAAI,CAAC,KAAL,CAAW,KAAX,EAAA,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,OAAF,CAAU,CAAV,CAAlB;AACD,KAFD;;AAGA,SAAK,MAAL,CAAY,cAAZ,GAA6B,UAAC,CAAD,EAAgB;;;AAC3C,MAAA,OAAO,CAAC,IAAR,CAAa,uCAAb;AACA,OAAA,EAAA,GAAA,KAAI,CAAC,KAAL,CAAW,KAAX,EAAA,MAAkB,IAAlB,IAAkB,EAAA,KAAA,KAAA,CAAlB,GAAkB,KAAA,CAAlB,GAAkB,EAAA,CAAE,MAAF,CAAS,CAAT,CAAlB;AACD,KAHD;AAID;;AAED,EAAA,QAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,MAAL,EAAa,OAAb,EAAgC;AAAhC,QAAA,KAAA,GAAA,IAAA;;AACE,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AACjC,MAAA,KAAI,CAAC,KAAL,CAAW,IAAX,CAAgB;AAAE,QAAA,OAAO,EAAA,OAAT;AAAW,QAAA,MAAM,EAAA;AAAjB,OAAhB;;AACA,UAAI;AACF,QAAA,KAAI,CAAC,MAAL,CAAY,WAAZ,CAAwB,MAAxB;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,QAAA,OAAO,CAAC,IAAR,CAAa,uCAAb;AACA,QAAA,UAAU,CAAC,OAAD,CAAV,IAAuB,OAAO,EAA9B;AACD;AACF,KARM,CAAP;AASD,GAVD;;AAYA,EAAA,QAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AACE,SAAK,MAAL,CAAY,SAAZ;AACD,GAFD;;AAGF,SAAA,QAAA;AAAC,CA9BD,EAAA;;AAgCA,OAAM,SAAU,YAAV,CAAuB,CAAvB,EAA6B;AACjC,MAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AAEnC,MAAI,IAAJ;;AACA,MAAI;AACF,IAAA,IAAI,GAAG,IAAI,IAAJ,CAAS,CAAC,CAAC,CAAC,QAAF,EAAD,CAAT,EAAyB;AAAE,MAAA,IAAI,EAAE;AAAR,KAAzB,CAAP;AACD,GAFD,CAEE,OAAO,CAAP,EAAU;AACV;AACA,IAAA,IAAI,GAAG,IAAI,MAAM,CAAC,WAAX,EAAP;AACA,IAAA,IAAI,CAAC,MAAL,CAAY,CAAC,CAAC,QAAF,EAAZ;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,OAAL,EAAP;AACD;;AAED,SAAO,IAAI,QAAJ,CAAa,GAAG,CAAC,eAAJ,CAAoB,IAApB,CAAb,CAAP;AACD","sourcesContent":["import { isFunction } from '@antv/util';\n\nclass MyWorker {\n  queue: any[] = [];\n  worker: Worker;\n\n  constructor(url) {\n    this.worker = new Worker(url);\n    this.worker.onmessage = (e: MessageEvent) => {\n      this.queue.shift()?.resolve(e);\n    };\n    this.worker.onmessageerror = (e: MessageEvent) => {\n      console.warn('[AntV G2] Web worker is not available');\n      this.queue.shift()?.reject(e);\n    };\n  }\n\n  post(params, onError?: () => any): Promise<MessageEvent> {\n    return new Promise((resolve, reject) => {\n      this.queue.push({ resolve, reject });\n      try {\n        this.worker.postMessage(params);\n      } catch (e) {\n        console.warn('[AntV G2] Web worker is not available');\n        isFunction(onError) && onError();\n      }\n    });\n  }\n\n  destroy() {\n    this.worker.terminate();\n  }\n}\n\nexport function createWorker(f: any) {\n  if (typeof window === 'undefined') return;\n\n  let blob;\n  try {\n    blob = new Blob([f.toString()], { type: 'application/javascript' });\n  } catch (e) {\n    // @ts-ignore\n    blob = new window.BlobBuilder();\n    blob.append(f.toString());\n    blob = blob.getBlob();\n  }\n\n  return new MyWorker(URL.createObjectURL(blob));\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}