{"ast":null,"code":"var onmessage = function (e) {\n  // Copy from src/util/collision-detect.ts\n  function generateUtils() {\n    function dot(a, b) {\n      return (a[0] || 0) * (b[0] || 0) + (a[1] || 0) * (b[1] || 0) + (a[2] || 0) * (b[2] || 0);\n    }\n    /**\n     * 1. 获取投影轴\n     */\n\n\n    function getAxes(points\n    /** 多边形的关键点 */\n    ) {\n      // 目前先处理 平行矩形 的场景, 其他多边形不处理\n      if (points.length > 4) {\n        return [];\n      } // 获取向量\n\n\n      var vector = function (start, end) {\n        return [end.x - start.x, end.y - start.y];\n      }; // 由于 矩形的平行原理，所以只有 2 条投影轴: A -> B, B -> C\n\n\n      var AB = vector(points[0], points[1]);\n      var BC = vector(points[1], points[2]);\n      return [AB, BC];\n    }\n    /**\n     * 绕指定点顺时针旋转后的点坐标\n     * 默认绕原点旋转\n     */\n\n\n    function rotateAtPoint(point, deg, origin) {\n      if (deg === void 0) {\n        deg = 0;\n      }\n\n      if (origin === void 0) {\n        origin = {\n          x: 0,\n          y: 0\n        };\n      }\n\n      var x = point.x,\n          y = point.y;\n      return {\n        x: (x - origin.x) * Math.cos(-deg) + (y - origin.y) * Math.sin(-deg) + origin.x,\n        y: (origin.x - x) * Math.sin(-deg) + (y - origin.y) * Math.cos(-deg) + origin.y\n      };\n    }\n    /**\n     * @private\n     * 转化为顶点坐标数组\n     *\n     * @param {Object} box\n     */\n\n\n    function getRectPoints(box) {\n      var points = [{\n        x: box.x,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y\n      }, {\n        x: box.x + box.width,\n        y: box.y + box.height\n      }, {\n        x: box.x,\n        y: box.y + box.height\n      }];\n      var rotation = box.rotation;\n\n      if (rotation) {\n        return [rotateAtPoint(points[0], rotation, points[0]), rotateAtPoint(points[1], rotation, points[0]), rotateAtPoint(points[2], rotation, points[0]), rotateAtPoint(points[3], rotation, points[0])];\n      }\n\n      return points;\n    }\n    /**\n     * 2. 获取多边形在投影轴上的投影\n     *\n     * 向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n     * 由于投影轴是单位向量（长度为1），投影的长度为 x1 * x2 + y1 * y2\n     */\n\n\n    function getProjection(points\n    /** 多边形的关键点 */\n    , axis) {\n      // 目前先处理矩形的场景\n      if (points.length > 4) {\n        return {\n          min: 0,\n          max: 0\n        };\n      }\n\n      var scalars = [];\n      points.forEach(function (point) {\n        scalars.push(dot([point.x, point.y], axis));\n      });\n      return {\n        min: Math.min.apply(null, scalars),\n        max: Math.max.apply(null, scalars)\n      };\n    }\n\n    function isProjectionOverlap(projection1, projection2) {\n      return projection1.max > projection2.min && projection1.min < projection2.max;\n    }\n\n    function isValidNumber(d) {\n      return typeof d === 'number' && !Number.isNaN(d) && d !== Infinity && d !== -Infinity;\n    }\n\n    function isValidBox(box) {\n      return ['x', 'y', 'width', 'height'].every(function (attr) {\n        return isValidNumber(box[attr]);\n      });\n    }\n\n    function isIntersectRect(box1, box2, margin) {\n      if (margin === void 0) {\n        margin = 0;\n      }\n\n      return !(box2.x > box1.x + box1.width + margin || box2.x + box2.width < box1.x - margin || box2.y > box1.y + box1.height + margin || box2.y + box2.height < box1.y - margin);\n    }\n\n    function intersect(box1, box2, margin) {\n      if (margin === void 0) {\n        margin = 0;\n      }\n\n      if (!isValidBox(box1) || !isValidBox(box2)) return false; // Quick detect, if rotation is null or zero.\n\n      if (!box1.rotation && !box2.rotation) {\n        return isIntersectRect(box1, box2, margin);\n      } // 分别获取 4 个关键点\n\n\n      var rect1Points = getRectPoints(box1);\n      var rect2Points = getRectPoints(box2); // 获取所有投影轴\n\n      var axes = getAxes(rect1Points).concat(getAxes(rect2Points));\n\n      for (var i = 0; i < axes.length; i++) {\n        var axis = axes[i];\n        var projection1 = getProjection(rect1Points, axis);\n        var projection2 = getProjection(rect2Points, axis);\n        if (!isProjectionOverlap(projection1, projection2)) return false;\n      }\n\n      return true;\n    }\n\n    return {\n      intersect: intersect\n    };\n  }\n\n  var intersect = generateUtils().intersect; // Label layouts.\n\n  function hideOverlap(items) {\n    var boxes = items.slice();\n\n    for (var i = 0; i < boxes.length; i++) {\n      var box1 = boxes[i];\n\n      if (box1.visible) {\n        for (var j = i + 1; j < boxes.length; j++) {\n          var box2 = boxes[j];\n\n          if (box1 !== box2 && box2.visible) {\n            if (intersect(box1, box2)) {\n              box2.visible = false;\n            }\n          }\n        }\n      }\n    }\n\n    return boxes;\n  }\n\n  var methods = {\n    'hide-overlap': hideOverlap\n  }; // Main\n\n  try {\n    var eventData = JSON.parse(e.data);\n    if (!eventData || !eventData.type || !methods[eventData.type]) return;\n    var type = eventData.type,\n        items = eventData.items;\n    var result = methods[type](items);\n    self.postMessage(result);\n  } catch (e) {\n    throw e;\n  }\n};\n\nvar code = \"\\n   self.onmessage = \".concat(onmessage.toString(), \"\\n\");\nexport { code };","map":{"version":3,"sources":["../../../../../src/geometry/label/layout/worker/hide-overlap.ts"],"names":[],"mappings":"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","sourcesContent":["const onmessage = function (e) {\n  type Item = {\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    rotation?: number;\n    visible?: boolean;\n  };\n\n  // Copy from src/util/collision-detect.ts\n  function generateUtils() {\n    type Vec2 = [number, number];\n\n    type Point = { x: number; y: number };\n\n    /**\n     * 定义投影对象\n     */\n    type Projection = { min: number; max: number };\n\n    function dot(a, b) {\n      return (a[0] || 0) * (b[0] || 0) + (a[1] || 0) * (b[1] || 0) + (a[2] || 0) * (b[2] || 0);\n    }\n    /**\n     * 1. 获取投影轴\n     */\n    function getAxes(points: Point[] /** 多边形的关键点 */): Vec2[] {\n      // 目前先处理 平行矩形 的场景, 其他多边形不处理\n      if (points.length > 4) {\n        return [];\n      }\n      // 获取向量\n      const vector = (start: Point, end: Point): Vec2 => {\n        return [end.x - start.x, end.y - start.y];\n      };\n\n      // 由于 矩形的平行原理，所以只有 2 条投影轴: A -> B, B -> C\n      const AB = vector(points[0], points[1]);\n      const BC = vector(points[1], points[2]);\n\n      return [AB, BC];\n    }\n\n    /**\n     * 绕指定点顺时针旋转后的点坐标\n     * 默认绕原点旋转\n     */\n    function rotateAtPoint(point: Point, deg = 0, origin = { x: 0, y: 0 }): Point {\n      const { x, y } = point;\n      return {\n        x: (x - origin.x) * Math.cos(-deg) + (y - origin.y) * Math.sin(-deg) + origin.x,\n        y: (origin.x - x) * Math.sin(-deg) + (y - origin.y) * Math.cos(-deg) + origin.y,\n      };\n    }\n\n    /**\n     * @private\n     * 转化为顶点坐标数组\n     *\n     * @param {Object} box\n     */\n    function getRectPoints(box: Item): Point[] {\n      const points = [\n        { x: box.x, y: box.y },\n        { x: box.x + box.width, y: box.y },\n        { x: box.x + box.width, y: box.y + box.height },\n        { x: box.x, y: box.y + box.height },\n      ];\n\n      const rotation = box.rotation;\n      if (rotation) {\n        return [\n          rotateAtPoint(points[0], rotation, points[0]),\n          rotateAtPoint(points[1], rotation, points[0]),\n          rotateAtPoint(points[2], rotation, points[0]),\n          rotateAtPoint(points[3], rotation, points[0]),\n        ];\n      }\n\n      return points;\n    }\n\n    /**\n     * 2. 获取多边形在投影轴上的投影\n     *\n     * 向量的点积的其中一个几何含义是：一个向量在平行于另一个向量方向上的投影的数值乘积。\n     * 由于投影轴是单位向量（长度为1），投影的长度为 x1 * x2 + y1 * y2\n     */\n    function getProjection(points: Point[] /** 多边形的关键点 */, axis: Vec2): Projection {\n      // 目前先处理矩形的场景\n      if (points.length > 4) {\n        return { min: 0, max: 0 };\n      }\n\n      const scalars = [];\n      points.forEach((point) => {\n        scalars.push(dot([point.x, point.y], axis));\n      });\n\n      return { min: Math.min.apply(null, scalars), max: Math.max.apply(null, scalars) };\n    }\n\n    function isProjectionOverlap(projection1: Projection, projection2: Projection): boolean {\n      return projection1.max > projection2.min && projection1.min < projection2.max;\n    }\n\n    function isValidNumber(d: number) {\n      return typeof d === 'number' && !Number.isNaN(d) && d !== Infinity && d !== -Infinity;\n    }\n\n    function isValidBox(box: Item) {\n      return ['x', 'y', 'width', 'height'].every(attr => isValidNumber(box[attr]))\n    }\n\n    function isIntersectRect(box1: Item, box2: Item, margin: number = 0): boolean {\n      return !(\n        box2.x > box1.x + box1.width + margin ||\n        box2.x + box2.width < box1.x - margin ||\n        box2.y > box1.y + box1.height + margin ||\n        box2.y + box2.height < box1.y - margin\n      );\n    }\n    function intersect(box1: Item, box2: Item, margin: number = 0) {\n      if (!isValidBox(box1) || !isValidBox(box2)) return false;\n\n      // Quick detect, if rotation is null or zero.\n      if (!box1.rotation && !box2.rotation) {\n        return isIntersectRect(box1, box2, margin);\n      }\n\n      // 分别获取 4 个关键点\n      const rect1Points = getRectPoints(box1);\n      const rect2Points = getRectPoints(box2);\n\n      // 获取所有投影轴\n      const axes = getAxes(rect1Points).concat(getAxes(rect2Points));\n\n      for (let i = 0; i < axes.length; i++) {\n        const axis = axes[i];\n        const projection1 = getProjection(rect1Points, axis);\n        const projection2 = getProjection(rect2Points, axis);\n\n        if (!isProjectionOverlap(projection1, projection2)) return false;\n      }\n\n      return true;\n    }\n    return { intersect }\n  }\n  const { intersect } = generateUtils();\n\n  // Label layouts.\n  function hideOverlap(items: Item[]) {\n    const boxes = items.slice();\n    for (let i = 0; i < boxes.length; i++) {\n      const box1 = boxes[i];\n      if (box1.visible) {\n        for (let j = i + 1; j < boxes.length; j++) {\n          const box2 = boxes[j];\n          if (box1 !== box2 && box2.visible) {\n            if (intersect(box1, box2)) {\n              box2.visible = false;\n            }\n          }\n        }\n      }\n    }\n    return boxes;\n  }\n\n  const methods = {\n    'hide-overlap': hideOverlap,\n  }\n\n  // Main\n  try {\n    const eventData = JSON.parse(e.data);\n    if (!eventData || !eventData.type || !methods[eventData.type]) return;\n\n    const { type, items } = eventData;\n    const result = methods[type](items);\n    self.postMessage(result);\n  } catch (e) {\n    throw e;\n  }\n}\n\nconst code = `\n   self.onmessage = ${onmessage.toString()}\n`\nexport { code };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}