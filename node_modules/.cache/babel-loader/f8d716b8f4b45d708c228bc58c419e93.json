{"ast":null,"code":"class LocalCart {\n  constructor() {\n    this.isExist = id => !!this.getItem(id);\n\n    this.getItems = () => JSON.parse(localStorage.getItem(\"__cart\")) || [];\n\n    this.getItem = id => this.getItems().find(product => product.product_id === id);\n\n    this.saveItems = data => localStorage.setItem(\"__cart\", JSON.stringify(data));\n\n    this.removeItem = id => this.saveItems(this.getItems().filter(product => product.product_id !== id));\n\n    this.incrementQuantity = id => this.saveItems(this.getItems().map(prod => {\n      if (id === prod.product_id) {\n        prod.quantity += 1;\n        prod.subtotal = prod.price * prod.quantity;\n      }\n\n      return prod;\n    }));\n\n    this.decrementQuantity = id => this.saveItems(this.getItems().map(prod => {\n      if (id === prod.product_id) {\n        if (prod.quantity === 0) {\n          prod.quantity = 0;\n        } else {\n          prod.quantity -= 1;\n        }\n\n        prod.subtotal = prod.price * prod.quantity;\n      }\n\n      return prod;\n    }));\n\n    this.addItem = (product, quantity) => {\n      if (this.isExist(product.product_id)) {\n        this.saveItems(this.getItems().map(prod => {\n          if (product.product_id === prod.product_id) {\n            prod.quantity += quantity || 1;\n          }\n\n          return prod;\n        }));\n      } else {\n        product.quantity = 1;\n        product.subtotal = product.price;\n        this.saveItems([...this.getItems(), product]);\n      }\n    };\n\n    this.clearCart = () => localStorage.removeItem(\"__cart\");\n  }\n\n}\n\nexport default new LocalCart();","map":{"version":3,"sources":["/Users/xiaxiaoyu/Desktop/javascript/dbms project/PHONE_STORE_FE/src/helpers/localStorage.js"],"names":["LocalCart","isExist","id","getItem","getItems","JSON","parse","localStorage","find","product","product_id","saveItems","data","setItem","stringify","removeItem","filter","incrementQuantity","map","prod","quantity","subtotal","price","decrementQuantity","addItem","clearCart"],"mappings":"AAAA,MAAMA,SAAN,CAAgB;AAAA;AAAA,SACdC,OADc,GACHC,EAAD,IAAQ,CAAC,CAAC,KAAKC,OAAL,CAAaD,EAAb,CADN;;AAAA,SAGdE,QAHc,GAGH,MAAMC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACJ,OAAb,CAAqB,QAArB,CAAX,KAA8C,EAHjD;;AAAA,SAKdA,OALc,GAKHD,EAAD,IACR,KAAKE,QAAL,GAAgBI,IAAhB,CAAsBC,OAAD,IAAaA,OAAO,CAACC,UAAR,KAAuBR,EAAzD,CANY;;AAAA,SAQdS,SARc,GAQDC,IAAD,IAAUL,YAAY,CAACM,OAAb,CAAqB,QAArB,EAA+BR,IAAI,CAACS,SAAL,CAAeF,IAAf,CAA/B,CARR;;AAAA,SAUdG,UAVc,GAUAb,EAAD,IACX,KAAKS,SAAL,CACE,KAAKP,QAAL,GAAgBY,MAAhB,CAAwBP,OAAD,IAAaA,OAAO,CAACC,UAAR,KAAuBR,EAA3D,CADF,CAXY;;AAAA,SAede,iBAfc,GAeOf,EAAD,IAClB,KAAKS,SAAL,CACE,KAAKP,QAAL,GAAgBc,GAAhB,CAAqBC,IAAD,IAAU;AAC5B,UAAIjB,EAAE,KAAKiB,IAAI,CAACT,UAAhB,EAA4B;AAC1BS,QAAAA,IAAI,CAACC,QAAL,IAAiB,CAAjB;AACAD,QAAAA,IAAI,CAACE,QAAL,GAAgBF,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACC,QAAlC;AACD;;AACD,aAAOD,IAAP;AACD,KAND,CADF,CAhBY;;AAAA,SA0BdI,iBA1Bc,GA0BOrB,EAAD,IAClB,KAAKS,SAAL,CACE,KAAKP,QAAL,GAAgBc,GAAhB,CAAqBC,IAAD,IAAU;AAC5B,UAAIjB,EAAE,KAAKiB,IAAI,CAACT,UAAhB,EAA4B;AAC1B,YAAIS,IAAI,CAACC,QAAL,KAAkB,CAAtB,EAAyB;AACvBD,UAAAA,IAAI,CAACC,QAAL,GAAgB,CAAhB;AACD,SAFD,MAEO;AACLD,UAAAA,IAAI,CAACC,QAAL,IAAiB,CAAjB;AACD;;AACDD,QAAAA,IAAI,CAACE,QAAL,GAAgBF,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACC,QAAlC;AACD;;AACD,aAAOD,IAAP;AACD,KAVD,CADF,CA3BY;;AAAA,SAyCdK,OAzCc,GAyCJ,CAACf,OAAD,EAAUW,QAAV,KAAuB;AAC/B,UAAI,KAAKnB,OAAL,CAAaQ,OAAO,CAACC,UAArB,CAAJ,EAAsC;AACpC,aAAKC,SAAL,CACE,KAAKP,QAAL,GAAgBc,GAAhB,CAAqBC,IAAD,IAAU;AAC5B,cAAIV,OAAO,CAACC,UAAR,KAAuBS,IAAI,CAACT,UAAhC,EAA4C;AAC1CS,YAAAA,IAAI,CAACC,QAAL,IAAiBA,QAAQ,IAAI,CAA7B;AACD;;AACD,iBAAOD,IAAP;AACD,SALD,CADF;AAQD,OATD,MASO;AACLV,QAAAA,OAAO,CAACW,QAAR,GAAmB,CAAnB;AACAX,QAAAA,OAAO,CAACY,QAAR,GAAmBZ,OAAO,CAACa,KAA3B;AACA,aAAKX,SAAL,CAAe,CAAC,GAAG,KAAKP,QAAL,EAAJ,EAAqBK,OAArB,CAAf;AACD;AACF,KAxDa;;AAAA,SAyDdgB,SAzDc,GAyDF,MAAMlB,YAAY,CAACQ,UAAb,CAAwB,QAAxB,CAzDJ;AAAA;;AAAA;;AA4DhB,eAAe,IAAIf,SAAJ,EAAf","sourcesContent":["class LocalCart {\r\n  isExist = (id) => !!this.getItem(id);\r\n\r\n  getItems = () => JSON.parse(localStorage.getItem(\"__cart\")) || [];\r\n\r\n  getItem = (id) =>\r\n    this.getItems().find((product) => product.product_id === id);\r\n\r\n  saveItems = (data) => localStorage.setItem(\"__cart\", JSON.stringify(data));\r\n\r\n  removeItem = (id) =>\r\n    this.saveItems(\r\n      this.getItems().filter((product) => product.product_id !== id)\r\n    );\r\n\r\n  incrementQuantity = (id) =>\r\n    this.saveItems(\r\n      this.getItems().map((prod) => {\r\n        if (id === prod.product_id) {\r\n          prod.quantity += 1;\r\n          prod.subtotal = prod.price * prod.quantity;\r\n        }\r\n        return prod;\r\n      })\r\n    );\r\n\r\n  decrementQuantity = (id) =>\r\n    this.saveItems(\r\n      this.getItems().map((prod) => {\r\n        if (id === prod.product_id) {\r\n          if (prod.quantity === 0) {\r\n            prod.quantity = 0;\r\n          } else {\r\n            prod.quantity -= 1;\r\n          }\r\n          prod.subtotal = prod.price * prod.quantity;\r\n        }\r\n        return prod;\r\n      })\r\n    );\r\n\r\n  addItem = (product, quantity) => {\r\n    if (this.isExist(product.product_id)) {\r\n      this.saveItems(\r\n        this.getItems().map((prod) => {\r\n          if (product.product_id === prod.product_id) {\r\n            prod.quantity += quantity || 1;\r\n          }\r\n          return prod;\r\n        })\r\n      );\r\n    } else {\r\n      product.quantity = 1;\r\n      product.subtotal = product.price;\r\n      this.saveItems([...this.getItems(), product]);\r\n    }\r\n  };\r\n  clearCart = () => localStorage.removeItem(\"__cart\")\r\n}\r\n\r\nexport default new LocalCart();\r\n"]},"metadata":{},"sourceType":"module"}