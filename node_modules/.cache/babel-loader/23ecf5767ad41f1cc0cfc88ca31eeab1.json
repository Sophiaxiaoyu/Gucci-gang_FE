{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/xiaxiaoyu/Desktop/javascript/dbms project/PHONE_STORE_FE/src/pages/ResetPassword.jsx\",\n    _s = $RefreshSig$();\n\nimport { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\nimport PulseLoader from \"react-spinners/PulseLoader\";\nimport useQuery from \"helpers/useQuery\";\nimport Layout from \"layout/Layout\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport toast from \"react-hot-toast\";\nimport { useHistory } from \"react-router-dom\";\nimport authService from \"services/auth.service\";\nimport { useForm } from \"react-hook-form\";\n\nconst ResetPassword = () => {\n  _s();\n\n  const [msg, setMsg] = useState(\"\");\n  const [resetmsg, setResetMsg] = useState(\"\");\n  const [isResetting, setIsResetting] = useState(false);\n  const history = useHistory();\n  const query = useQuery();\n  const token = query.get(\"token\");\n  const email = query.get(\"email\");\n  const {\n    register,\n    handleSubmit,\n    errors,\n    watch\n  } = useForm();\n  const password = useRef({});\n  password.current = watch(\"password\", \"\");\n  useEffect(() => {\n    authService.checkToken(token, email).then(({\n      data\n    }) => setMsg(data)).catch(e => console.error(e.response));\n  }, [token, email]);\n\n  const handlePasswordReset = data => {\n    setIsResetting(true);\n    authService.resetPassword(token, email, data.password, data.password2).then(({\n      data\n    }) => {\n      if (data.status === \"error\") {\n        setIsResetting(false);\n        setResetMsg(data);\n        return;\n      }\n\n      toast.success(data.message);\n      setTimeout(() => {\n        history.push(\"/login\");\n      }, 2000);\n    }).catch(err => {\n      setIsResetting(false);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Layout, {\n    title: \"Reset Password\",\n    children: msg.showForm ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-12\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"max-w-lg mx-auto mb-4\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-4xl font-bold text-center\",\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mx-auto max-w-lg shadow-2xl p-8 md:p-10\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"flex flex-col\",\n          onSubmit: handleSubmit(handlePasswordReset),\n          children: [/*#__PURE__*/_jsxDEV(Label, {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"block text-gray-700 text-sm font-bold mb-2\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              className: \"rounded w-full text-gray-700 focus:outline-none border px-2 py-2 focus:border-purple-600 transition duration-500\",\n              type: \"password\",\n              inputMode: \"password\",\n              name: \"password\",\n              ref: register({\n                required: \"Password cannot be empty\",\n                minLength: {\n                  value: 6,\n                  message: \"Password must be greater than 5 characters\"\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 17\n            }, this), errors.password && errors.password.type === \"required\" && /*#__PURE__*/_jsxDEV(HelperText, {\n              className: \"pt-2\",\n              valid: false,\n              children: resetmsg.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this), errors.password && errors.password.type === \"minLength\" && /*#__PURE__*/_jsxDEV(HelperText, {\n              className: \"pt-2\",\n              valid: false,\n              children: resetmsg.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Label, {\n            className: \"mb-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"block text-gray-700 text-sm font-bold mb-2\",\n              children: \"Confirm Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              className: \"rounded w-full text-gray-700 focus:outline-none border px-2 py-2 focus:border-purple-600 transition duration-500\",\n              type: \"password\",\n              inputMode: \"password\",\n              name: \"password2\",\n              ref: register({\n                validate: value => value === password.current || \"Passwords do not match\"\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 15\n          }, this), errors.password && errors.password.type === \"required\" && /*#__PURE__*/_jsxDEV(HelperText, {\n            className: \"pt-2\",\n            valid: false,\n            children: resetmsg.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), resetmsg && /*#__PURE__*/_jsxDEV(HelperText, {\n            className: \"pt-2\",\n            valid: false,\n            children: resetmsg.message || \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: isResetting,\n            children: isResetting ? /*#__PURE__*/_jsxDEV(PulseLoader, {\n              size: 10,\n              color: \"#0a138b\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this) : \"Reset Password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: msg.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ResetPassword, \"UHHnYNGL3BENI1sQ58R+/bgdFns=\", false, function () {\n  return [useHistory, useQuery, useForm];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["/Users/xiaxiaoyu/Desktop/javascript/dbms project/PHONE_STORE_FE/src/pages/ResetPassword.jsx"],"names":["Button","HelperText","Input","Label","PulseLoader","useQuery","Layout","React","useEffect","useRef","useState","toast","useHistory","authService","useForm","ResetPassword","msg","setMsg","resetmsg","setResetMsg","isResetting","setIsResetting","history","query","token","get","email","register","handleSubmit","errors","watch","password","current","checkToken","then","data","catch","e","console","error","response","handlePasswordReset","resetPassword","password2","status","success","message","setTimeout","push","err","showForm","required","minLength","value","type","validate"],"mappings":"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","sourcesContent":["import { Button, HelperText, Input, Label } from \"@windmill/react-ui\";\r\nimport PulseLoader from \"react-spinners/PulseLoader\";\r\nimport useQuery from \"helpers/useQuery\";\r\nimport Layout from \"layout/Layout\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport authService from \"services/auth.service\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nconst ResetPassword = () => {\r\n  const [msg, setMsg] = useState(\"\");\r\n  const [resetmsg, setResetMsg] = useState(\"\");\r\n  const [isResetting, setIsResetting] = useState(false);\r\n  const history = useHistory();\r\n  const query = useQuery();\r\n  const token = query.get(\"token\");\r\n  const email = query.get(\"email\");\r\n  const { register, handleSubmit, errors, watch } = useForm();\r\n  const password = useRef({});\r\n  password.current = watch(\"password\", \"\");\r\n\r\n  useEffect(() => {\r\n    authService\r\n      .checkToken(token, email)\r\n      .then(({ data }) => setMsg(data))\r\n      .catch((e) => console.error(e.response));\r\n  }, [token, email]);\r\n\r\n  const handlePasswordReset = (data) => {\r\n    setIsResetting(true);\r\n    authService\r\n      .resetPassword(token, email, data.password, data.password2)\r\n      .then(({ data }) => {\r\n        if (data.status === \"error\") {\r\n          setIsResetting(false);\r\n          setResetMsg(data);\r\n          return;\r\n        }\r\n        toast.success(data.message);\r\n        setTimeout(() => {\r\n          history.push(\"/login\");\r\n        }, 2000);\r\n      })\r\n      .catch((err) => {\r\n        setIsResetting(false);\r\n      });\r\n  };\r\n  return (\r\n    <Layout title=\"Reset Password\">\r\n      {msg.showForm ? (\r\n        <div className=\"pt-12\">\r\n          <header className=\"max-w-lg mx-auto mb-4\">\r\n            <h1 className=\"text-4xl font-bold text-center\">Reset Password</h1>\r\n          </header>\r\n          <div className=\"mx-auto max-w-lg shadow-2xl p-8 md:p-10\">\r\n            <form\r\n              className=\"flex flex-col\"\r\n              onSubmit={handleSubmit(handlePasswordReset)}\r\n            >\r\n              <Label className=\"mb-4\">\r\n                <span className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                  Password\r\n                </span>\r\n                <Input\r\n                  className=\"rounded w-full text-gray-700 focus:outline-none border px-2 py-2 focus:border-purple-600 transition duration-500\"\r\n                  type=\"password\"\r\n                  inputMode=\"password\"\r\n                  name=\"password\"\r\n                  ref={register({\r\n                    required: \"Password cannot be empty\",\r\n                    minLength: {\r\n                      value: 6,\r\n                      message: \"Password must be greater than 5 characters\",\r\n                    },\r\n                  })}\r\n                />\r\n                {errors.password && errors.password.type === \"required\" && (\r\n                  <HelperText className=\"pt-2\" valid={false}>\r\n                    {resetmsg.message}\r\n                  </HelperText>\r\n                )}\r\n                {errors.password && errors.password.type === \"minLength\" && (\r\n                  <HelperText className=\"pt-2\" valid={false}>\r\n                    {resetmsg.message}\r\n                  </HelperText>\r\n                )}\r\n              </Label>\r\n              <Label className=\"mb-4\">\r\n                <span className=\"block text-gray-700 text-sm font-bold mb-2\">\r\n                  Confirm Password\r\n                </span>\r\n                <Input\r\n                  className=\"rounded w-full text-gray-700 focus:outline-none border px-2 py-2 focus:border-purple-600 transition duration-500\"\r\n                  type=\"password\"\r\n                  inputMode=\"password\"\r\n                  name=\"password2\"\r\n                  ref={register({\r\n                    validate: (value) =>\r\n                      value === password.current || \"Passwords do not match\",\r\n                  })}\r\n                />\r\n              </Label>\r\n              {errors.password && errors.password.type === \"required\" && (\r\n                <HelperText className=\"pt-2\" valid={false}>\r\n                  {resetmsg.message}\r\n                </HelperText>\r\n              )}\r\n              {resetmsg && (\r\n                <HelperText className=\"pt-2\" valid={false}>\r\n                  {resetmsg.message || \"\"}\r\n                </HelperText>\r\n              )}\r\n              <Button type=\"submit\" disabled={isResetting}>\r\n                {isResetting ? (\r\n                  <PulseLoader size={10} color={\"#0a138b\"} />\r\n                ) : (\r\n                  \"Reset Password\"\r\n                )}\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div>{msg.message}</div>\r\n      )}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n"]},"metadata":{},"sourceType":"module"}