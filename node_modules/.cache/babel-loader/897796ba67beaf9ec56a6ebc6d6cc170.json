{"ast":null,"code":"import { __values } from \"tslib\";\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\nregisterShape('point', 'image', {\n  draw: function (cfg, container) {\n    var e_1, _a;\n\n    var size = getStyle(cfg, false, false, 'r').r;\n    var points = this.parsePoints(cfg.points);\n    var pointPosition = points[0];\n\n    if (cfg.isStack) {\n      pointPosition = points[1];\n    } else if (points.length > 1) {\n      var group = container.addGroup();\n\n      try {\n        for (var points_1 = __values(points), points_1_1 = points_1.next(); !points_1_1.done; points_1_1 = points_1.next()) {\n          var point = points_1_1.value;\n          group.addShape('image', {\n            attrs: {\n              x: point.x - size / 2,\n              y: point.y - size,\n              width: size,\n              height: size,\n              img: cfg.shape[1]\n            }\n          });\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (points_1_1 && !points_1_1.done && (_a = points_1.return)) _a.call(points_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return group;\n    }\n\n    return container.addShape('image', {\n      attrs: {\n        x: pointPosition.x - size / 2,\n        y: pointPosition.y - size,\n        width: size,\n        height: size,\n        img: cfg.shape[1]\n      }\n    });\n  },\n  getMarker: function (markerCfg) {\n    var color = markerCfg.color;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: color\n      }\n    };\n  }\n});","map":{"version":3,"sources":["../../../../src/geometry/shape/point/image.ts"],"names":[],"mappings":";AAGA,SAAS,aAAT,QAA8B,SAA9B;AACA,SAAS,QAAT,QAAyB,mBAAzB;AAEA,aAAa,CAAC,OAAD,EAAU,OAAV,EAAmB;AAC9B,EAAA,IAAI,EAAA,UAAC,GAAD,EAAiB,SAAjB,EAAkC;;;AAC5B,QAAG,IAAI,GAAK,QAAQ,CAAC,GAAD,EAAM,KAAN,EAAa,KAAb,EAAoB,GAApB,CAAR,CAAL,CAAP;AACR,QAAM,MAAM,GAAG,KAAK,WAAL,CAAiB,GAAG,CAAC,MAArB,CAAf;AACA,QAAI,aAAa,GAAG,MAAM,CAAC,CAAD,CAA1B;;AACA,QAAI,GAAG,CAAC,OAAR,EAAiB;AACf,MAAA,aAAa,GAAG,MAAM,CAAC,CAAD,CAAtB;AACD,KAFD,MAEO,IAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;AAC5B,UAAM,KAAK,GAAG,SAAS,CAAC,QAAV,EAAd;;;AACA,aAAoB,IAAA,QAAA,GAAA,QAAA,CAAA,MAAA,CAAA,EAAM,UAAA,GAAA,QAAA,CAAA,IAAA,EAA1B,EAA0B,CAAA,UAAA,CAAA,IAA1B,EAA0B,UAAA,GAAA,QAAA,CAAA,IAAA,EAA1B,EAA4B;AAAvB,cAAM,KAAK,GAAA,UAAA,CAAA,KAAX;AACH,UAAA,KAAK,CAAC,QAAN,CAAe,OAAf,EAAwB;AACtB,YAAA,KAAK,EAAE;AACL,cAAA,CAAC,EAAG,KAAK,CAAC,CAAN,GAAqB,IAAI,GAAG,CAD3B;AAEL,cAAA,CAAC,EAAG,KAAK,CAAC,CAAN,GAAqB,IAFpB;AAGL,cAAA,KAAK,EAAE,IAHF;AAIL,cAAA,MAAM,EAAE,IAJH;AAKL,cAAA,GAAG,EAAE,GAAG,CAAC,KAAJ,CAAU,CAAV;AALA;AADe,WAAxB;AASD;;;;;;;;;;;;;AAED,aAAO,KAAP;AACD;;AAED,WAAO,SAAS,CAAC,QAAV,CAAmB,OAAnB,EAA4B;AACjC,MAAA,KAAK,EAAE;AACL,QAAA,CAAC,EAAG,aAAa,CAAC,CAAd,GAA6B,IAAI,GAAG,CADnC;AAEL,QAAA,CAAC,EAAG,aAAa,CAAC,CAAd,GAA6B,IAF5B;AAGL,QAAA,KAAK,EAAE,IAHF;AAIL,QAAA,MAAM,EAAE,IAJH;AAKL,QAAA,GAAG,EAAE,GAAG,CAAC,KAAJ,CAAU,CAAV;AALA;AAD0B,KAA5B,CAAP;AASD,GAjC6B;AAkC9B,EAAA,SAAS,EAAA,UAAC,SAAD,EAA0B;AACzB,QAAA,KAAK,GAAK,SAAS,CAAd,KAAL;AACR,WAAO;AACL,MAAA,MAAM,EAAE,QADH;AAEL,MAAA,KAAK,EAAE;AACL,QAAA,CAAC,EAAE,GADE;AAEL,QAAA,IAAI,EAAE;AAFD;AAFF,KAAP;AAOD;AA3C6B,CAAnB,CAAb","sourcesContent":["import { IGroup } from '../../../dependents';\nimport { ShapeInfo, ShapeMarkerCfg } from '../../../interface';\n\nimport { registerShape } from '../base';\nimport { getStyle } from '../util/get-style';\n\nregisterShape('point', 'image', {\n  draw(cfg: ShapeInfo, container: IGroup) {\n    const { r: size } = getStyle(cfg, false, false, 'r');\n    const points = this.parsePoints(cfg.points);\n    let pointPosition = points[0];\n    if (cfg.isStack) {\n      pointPosition = points[1];\n    } else if (points.length > 1) {\n      const group = container.addGroup();\n      for (const point of points) {\n        group.addShape('image', {\n          attrs: {\n            x: (point.x as number) - size / 2,\n            y: (point.y as number) - size,\n            width: size,\n            height: size,\n            img: cfg.shape[1],\n          },\n        });\n      }\n\n      return group;\n    }\n\n    return container.addShape('image', {\n      attrs: {\n        x: (pointPosition.x as number) - size / 2,\n        y: (pointPosition.y as number) - size,\n        width: size,\n        height: size,\n        img: cfg.shape[1],\n      },\n    });\n  },\n  getMarker(markerCfg: ShapeMarkerCfg) {\n    const { color } = markerCfg;\n    return {\n      symbol: 'circle',\n      style: {\n        r: 4.5,\n        fill: color,\n      },\n    };\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}