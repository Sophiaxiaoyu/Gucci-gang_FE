{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { get, map, filter, each } from '@antv/util';\nimport { Action } from '@antv/g2';\nimport { conversionTag as basicConversionTag } from '../geometries/basic';\nimport { compareConversionTag } from '../geometries/compare';\nimport { transformData, CONVERSION_TAG_NAME } from '../geometries/common';\n/**\n * Funnel 转化率跟随 legend 变化事件\n */\n\nvar ConversionTagAction =\n/** @class */\nfunction (_super) {\n  __extends(ConversionTagAction, _super);\n\n  function ConversionTagAction() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.rendering = false;\n    return _this;\n  }\n\n  ConversionTagAction.prototype.change = function (options) {\n    var _this = this; // 防止多次重复渲染\n\n\n    if (!this.rendering) {\n      var seriesField = options.seriesField,\n          compareField = options.compareField;\n      var conversionTag_1 = compareField ? compareConversionTag : basicConversionTag;\n      var view = this.context.view; // 兼容分面漏斗图\n\n      var views = seriesField || compareField ? view.views : [view];\n      map(views, function (v, index) {\n        // 防止影响其他 annotations 被去除\n        var annotationController = v.getController('annotation');\n        var annotations = filter(get(annotationController, ['option'], []), function (_a) {\n          var name = _a.name;\n          return name !== CONVERSION_TAG_NAME;\n        });\n        annotationController.clear(true);\n        each(annotations, function (annotation) {\n          if (typeof annotation === 'object') {\n            v.annotation()[annotation.type](annotation);\n          }\n        });\n        var data = get(v, ['filteredData'], v.getOptions().data);\n        conversionTag_1({\n          chart: v,\n          index: index,\n          options: __assign(__assign({}, options), {\n            // @ts-ignore\n            filteredData: transformData(data, data, options)\n          })\n        });\n        v.filterData(data);\n        _this.rendering = true;\n        v.render(true);\n      });\n    }\n\n    this.rendering = false;\n  };\n\n  return ConversionTagAction;\n}(Action);\n\nexport { ConversionTagAction };","map":{"version":3,"sources":["../../../../src/plots/funnel/interactions/funnel-conversion-tag.ts"],"names":[],"mappings":";AAAA,SAAS,GAAT,EAAc,GAAd,EAAmB,MAAnB,EAA2B,IAA3B,QAAuC,YAAvC;AACA,SAAS,MAAT,QAAuB,UAAvB;AACA,SAAS,aAAa,IAAI,kBAA1B,QAAoD,qBAApD;AACA,SAAS,oBAAT,QAAqC,uBAArC;AACA,SAAS,aAAT,EAAwB,mBAAxB,QAAmD,sBAAnD;AAGA;;AAEG;;AACH,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;AAAzC,WAAA,mBAAA,GAAA;AAAA,QAAA,KAAA,GAAA,MAAA,KAAA,IAAA,IAAA,MAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA,IAAA,IAAA;;AACU,IAAA,KAAA,CAAA,SAAA,GAAY,KAAZ;;AA6CT;;AA5CQ,EAAA,mBAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UAAc,OAAd,EAAoC;AAApC,QAAA,KAAA,GAAA,IAAA,CAAoC,CAClC;;;AACA,QAAI,CAAC,KAAK,SAAV,EAAqB;AACX,UAAA,WAAW,GAAmB,OAAO,CAA1B,WAAX;AAAA,UAAa,YAAY,GAAK,OAAO,CAAZ,YAAzB;AACR,UAAM,eAAa,GAAG,YAAY,GAAG,oBAAH,GAA0B,kBAA5D;AACQ,UAAA,IAAI,GAAK,KAAK,OAAL,CAAL,IAAJ,CAHW,CAInB;;AACA,UAAM,KAAK,GAAG,WAAW,IAAI,YAAf,GAA8B,IAAI,CAAC,KAAnC,GAA2C,CAAC,IAAD,CAAzD;AACA,MAAA,GAAG,CAAC,KAAD,EAAQ,UAAC,CAAD,EAAI,KAAJ,EAAS;AAClB;AACA,YAAM,oBAAoB,GAAG,CAAC,CAAC,aAAF,CAAgB,YAAhB,CAA7B;AAEA,YAAM,WAAW,GAAG,MAAM,CACxB,GAAG,CAAC,oBAAD,EAAuB,CAAC,QAAD,CAAvB,EAAmC,EAAnC,CADqB,EAExB,UAAC,EAAD,EAAS;cAAN,IAAI,GAAA,EAAA,CAAA,I;AAAO,iBAAA,IAAI,KAAK,mBAAT;AAA4B,SAFlB,CAA1B;AAKA,QAAA,oBAAoB,CAAC,KAArB,CAA2B,IAA3B;AAEA,QAAA,IAAI,CAAC,WAAD,EAAc,UAAC,UAAD,EAAW;AAC3B,cAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,YAAA,CAAC,CAAC,UAAF,GAAe,UAAU,CAAC,IAA1B,EAAgC,UAAhC;AACD;AACF,SAJG,CAAJ;AAMA,YAAM,IAAI,GAAG,GAAG,CAAC,CAAD,EAAI,CAAC,cAAD,CAAJ,EAAsB,CAAC,CAAC,UAAF,GAAe,IAArC,CAAhB;AAEA,QAAA,eAAa,CAAC;AACZ,UAAA,KAAK,EAAE,CADK;AAEZ,UAAA,KAAK,EAAA,KAFO;AAGZ,UAAA,OAAO,EAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EACF,OADE,CAAA,EACK;AACV;AACA,YAAA,YAAY,EAAE,aAAa,CAAC,IAAD,EAAO,IAAP,EAAa,OAAb;AAFjB,WADL;AAHK,SAAD,CAAb;AAUA,QAAA,CAAC,CAAC,UAAF,CAAa,IAAb;AACA,QAAA,KAAI,CAAC,SAAL,GAAiB,IAAjB;AACA,QAAA,CAAC,CAAC,MAAF,CAAS,IAAT;AACD,OAhCE,CAAH;AAiCD;;AACD,SAAK,SAAL,GAAiB,KAAjB;AACD,GA3CM;;AA4CT,SAAA,mBAAA;AAAC,CA9CD,CAAyC,MAAzC,CAAA","sourcesContent":["import { get, map, filter, each } from '@antv/util';\nimport { Action } from '@antv/g2';\nimport { conversionTag as basicConversionTag } from '../geometries/basic';\nimport { compareConversionTag } from '../geometries/compare';\nimport { transformData, CONVERSION_TAG_NAME } from '../geometries/common';\nimport { FunnelOptions } from '../types';\n\n/**\n * Funnel 转化率跟随 legend 变化事件\n */\nexport class ConversionTagAction extends Action {\n  private rendering = false;\n  public change(options: FunnelOptions) {\n    // 防止多次重复渲染\n    if (!this.rendering) {\n      const { seriesField, compareField } = options;\n      const conversionTag = compareField ? compareConversionTag : basicConversionTag;\n      const { view } = this.context;\n      // 兼容分面漏斗图\n      const views = seriesField || compareField ? view.views : [view];\n      map(views, (v, index) => {\n        // 防止影响其他 annotations 被去除\n        const annotationController = v.getController('annotation');\n\n        const annotations = filter(\n          get(annotationController, ['option'], []),\n          ({ name }) => name !== CONVERSION_TAG_NAME\n        );\n\n        annotationController.clear(true);\n\n        each(annotations, (annotation) => {\n          if (typeof annotation === 'object') {\n            v.annotation()[annotation.type](annotation);\n          }\n        });\n\n        const data = get(v, ['filteredData'], v.getOptions().data);\n\n        conversionTag({\n          chart: v,\n          index,\n          options: {\n            ...options,\n            // @ts-ignore\n            filteredData: transformData(data, data, options),\n          },\n        });\n\n        v.filterData(data);\n        this.rendering = true;\n        v.render(true);\n      });\n    }\n    this.rendering = false;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}