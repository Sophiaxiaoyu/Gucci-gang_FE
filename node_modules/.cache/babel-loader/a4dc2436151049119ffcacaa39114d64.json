{"ast":null,"code":"import { __assign, __read, __spreadArray } from \"tslib\";\nimport { firstValue, get, isEmpty, isNil, isNumber, isString, valuesOfKey } from '@antv/util';\nimport { GROUP_ATTRS } from '../constant';\nimport { getScale } from '../dependents';\nimport { isFullCircle } from './coordinate';\nvar dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\n\nfunction getDefaultType(value) {\n  var type = 'linear';\n\n  if (dateRegex.test(value)) {\n    type = 'timeCat';\n  } else if (isString(value)) {\n    type = 'cat';\n  }\n\n  return type;\n}\n/**\n * using the scale type if user specified, otherwise infer the type\n */\n\n\nexport function inferScaleType(scale, scaleDef, attrType, geometryType) {\n  if (scaleDef === void 0) {\n    scaleDef = {};\n  }\n\n  if (scaleDef.type) return scaleDef.type; // identity scale 直接返回\n  // geometry 类型有: edge,heatmap,interval,line,path,point,polygon,schema,voilin等；理论上，interval 下，可以用 linear scale 作为分组字段\n\n  if (scale.type !== 'identity' && GROUP_ATTRS.includes(attrType) && ['interval'].includes(geometryType)) {\n    return 'cat';\n  }\n\n  return scale.isCategory ? 'cat' : scale.type;\n}\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\n\nexport function createScaleByField(field, data, scaleDef) {\n  var validData = data || [];\n\n  if (isNumber(field) || isNil(firstValue(validData, field)) && isEmpty(scaleDef)) {\n    var Identity = getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field]\n    });\n  }\n\n  var values = valuesOfKey(validData, field); // 如果已经定义过这个度量 (fix-later 单纯从数据中，推断 scale type 是不精确的)\n\n  var type = get(scaleDef, 'type', getDefaultType(values[0]));\n  var ScaleCtor = getScale(type);\n  return new ScaleCtor(__assign({\n    field: field,\n    values: values\n  }, scaleDef));\n}\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\n\nexport function syncScale(scale, newScale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    var obj = {};\n\n    for (var k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n\n    scale.change(obj);\n  }\n}\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\n\nexport function getName(scale) {\n  return scale.alias || scale.field;\n}\n/**\n * 根据 scale values 和 coordinate 获取分类默认 range\n * @param scale 需要获取的 scale 实例\n * @param coordinate coordinate 实例\n * @param theme theme\n */\n\nexport function getDefaultCategoryScaleRange(scale, coordinate, theme) {\n  var values = scale.values;\n  var count = values.length;\n  var range;\n\n  if (count === 1) {\n    range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5] 的状态\n  } else {\n    var widthRatio = 1;\n    var offset = 0;\n\n    if (isFullCircle(coordinate)) {\n      if (!coordinate.isTransposed) {\n        range = [0, 1 - 1 / count];\n      } else {\n        widthRatio = get(theme, 'widthRatio.multiplePie', 1 / 1.3);\n        offset = 1 / count * widthRatio;\n        range = [offset / 2, 1 - offset / 2];\n      }\n    } else {\n      offset = 1 / count / 2; // 两边留下分类空间的一半\n\n      range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时\n    }\n  }\n\n  return range;\n}\n/**\n * @function y轴scale的max\n * @param {yScale}\n */\n\nexport function getMaxScale(scale) {\n  // 过滤values[]中 NaN/undefined/null 等\n  var values = scale.values.filter(function (item) {\n    return !isNil(item) && !isNaN(item);\n  });\n  return Math.max.apply(Math, __spreadArray(__spreadArray([], __read(values), false), [isNil(scale.max) ? -Infinity : scale.max], false));\n}","map":{"version":3,"sources":["../../src/util/scale.ts"],"names":[],"mappings":"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","sourcesContent":["import { firstValue, get, isEmpty, isNil, isNumber, isString, valuesOfKey } from '@antv/util';\nimport { GROUP_ATTRS } from '../constant';\nimport { getScale, Scale, Coordinate } from '../dependents';\nimport { LooseObject, ScaleOption, ViewCfg } from '../interface';\nimport { isFullCircle } from './coordinate';\n\nconst dateRegex =\n  /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\\1(?:29|30)|(?:0?[13578]|1[02])\\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]+)0?2\\2(?:29))(\\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;\n\n/**\n * 获取字段对应数据的类型\n * @param field 数据字段名\n * @param data 数据源\n * @returns default type 返回对应的数据类型\n */\nfunction getDefaultType(value: any): string {\n  let type = 'linear';\n  if (dateRegex.test(value)) {\n    type = 'timeCat';\n  } else if (isString(value)) {\n    type = 'cat';\n  }\n  return type;\n}\n\n/**\n * using the scale type if user specified, otherwise infer the type\n */\nexport function inferScaleType(scale: Scale, scaleDef: ScaleOption = {}, attrType: string, geometryType: string): string {\n  if (scaleDef.type) return scaleDef.type;\n  // identity scale 直接返回\n  // geometry 类型有: edge,heatmap,interval,line,path,point,polygon,schema,voilin等；理论上，interval 下，可以用 linear scale 作为分组字段\n  if (scale.type !== 'identity' && GROUP_ATTRS.includes(attrType) && ['interval'].includes(geometryType)) {\n    return 'cat';\n  }\n  return scale.isCategory ? 'cat' : scale.type;\n}\n\n/**\n * @ignore\n * 为指定的 `field` 字段数据创建 scale\n * @param field 字段名\n * @param [data] 数据集，可为空\n * @param [scaleDef] 列定义，可为空\n * @returns scale 返回创建的 Scale 实例\n */\nexport function createScaleByField(field: string | number, data?: LooseObject[] | [], scaleDef?: ScaleOption): Scale {\n  const validData = data || [];\n\n  if (isNumber(field) || (isNil(firstValue(validData, field)) && isEmpty(scaleDef))) {\n    const Identity = getScale('identity');\n    return new Identity({\n      field: field.toString(),\n      values: [field],\n    });\n  }\n\n  const values = valuesOfKey(validData, field);\n\n  // 如果已经定义过这个度量 (fix-later 单纯从数据中，推断 scale type 是不精确的)\n  const type = get(scaleDef, 'type', getDefaultType(values[0]));\n  const ScaleCtor = getScale(type);\n  return new ScaleCtor({\n    field,\n    values,\n    ...scaleDef,\n  });\n}\n\n/**\n * @ignore\n * 同步 scale\n * @todo 是否可以通过 scale.update() 方法进行更新\n * @param scale 需要同步的 scale 实例\n * @param newScale 同步源 Scale\n */\nexport function syncScale(scale: Scale, newScale: Scale) {\n  if (scale.type !== 'identity' && newScale.type !== 'identity') {\n    const obj = {};\n    for (const k in newScale) {\n      if (Object.prototype.hasOwnProperty.call(newScale, k)) {\n        obj[k] = newScale[k];\n      }\n    }\n\n    scale.change(obj);\n  }\n}\n\n/**\n * @ignore\n * get the scale name, if alias exist, return alias, or else field\n * @param scale\n * @returns the name of field\n */\nexport function getName(scale: Scale): string {\n  return scale.alias || scale.field;\n}\n\n/**\n * 根据 scale values 和 coordinate 获取分类默认 range\n * @param scale 需要获取的 scale 实例\n * @param coordinate coordinate 实例\n * @param theme theme\n */\nexport function getDefaultCategoryScaleRange(\n  scale: Scale,\n  coordinate: Coordinate,\n  theme: ViewCfg['theme']\n): Scale['range'] {\n  const { values } = scale;\n  const count = values.length;\n  let range;\n\n  if (count === 1) {\n    range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5] 的状态\n  } else {\n    let widthRatio = 1;\n    let offset = 0;\n\n    if (isFullCircle(coordinate)) {\n      if (!coordinate.isTransposed) {\n        range = [0, 1 - 1 / count];\n      } else {\n        widthRatio = get(theme, 'widthRatio.multiplePie', 1 / 1.3);\n        offset = (1 / count) * widthRatio;\n        range = [offset / 2, 1 - offset / 2];\n      }\n    } else {\n      offset = 1 / count / 2; // 两边留下分类空间的一半\n      range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时\n    }\n  }\n  return range;\n}\n\n/**\n * @function y轴scale的max\n * @param {yScale}\n */\nexport function getMaxScale(scale: Scale) {\n  // 过滤values[]中 NaN/undefined/null 等\n  const values = scale.values.filter((item) => !isNil(item) && !isNaN(item));\n\n  return Math.max(...values, isNil(scale.max) ? -Infinity : scale.max);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}