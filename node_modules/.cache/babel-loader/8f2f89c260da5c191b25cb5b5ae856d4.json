{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMemo } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({\n  children\n}) => {\n  _s();\n\n  const {\n    setIsLoggedIn,\n    setUserData,\n    setAuthData,\n    isLoggedIn\n  } = useUser();\n  useMemo(() => {\n    if (isLoggedIn) {\n      API.interceptors.response.use(response => response, async error => {\n        const originalRequest = error.config;\n\n        if (error.response.status === 401 && originalRequest.url === \"/auth/refresh-token\") {\n          return new Promise((resolve, reject) => {\n            setIsLoggedIn(false);\n            setAuthData(null);\n            setUserData(null);\n            history.push(\"/login\");\n            reject(error);\n          });\n        }\n\n        if (error.response.status === 401 && !originalRequest._retry) {\n          try {\n            originalRequest._retry = true;\n            const res = await API.post(\"/auth/refresh-token\");\n            localStorage.setItem(\"token\", JSON.stringify(res.data.token));\n            return API(originalRequest);\n          } catch (error) {\n            localStorage.removeItem(\"token\");\n            setIsLoggedIn(false);\n            setAuthData(null);\n            setUserData(null);\n            history.push(\"/login\");\n          }\n        }\n\n        return Promise.reject(error);\n      });\n    }\n  }, [isLoggedIn, setAuthData, setIsLoggedIn, setUserData]);\n  return children;\n};\n\n_s(WithAxios, \"9m+XpnHuUrw5zWuSpAgQBJlLUXk=\", false, function () {\n  return [useUser];\n});\n\n_c = WithAxios;\nexport default WithAxios;\n\nvar _c;\n\n$RefreshReg$(_c, \"WithAxios\");","map":{"version":3,"sources":["/Users/xiaxiaoyu/Desktop/javascript/DBSM_phone/PHONE_STORE_FE/src/helpers/WithAxios.js"],"names":["useMemo","API","useUser","history","WithAxios","children","setIsLoggedIn","setUserData","setAuthData","isLoggedIn","interceptors","response","use","error","originalRequest","config","status","url","Promise","resolve","reject","push","_retry","res","post","localStorage","setItem","JSON","stringify","data","token","removeItem"],"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,OAAOC,GAAP,MAAgB,kBAAhB;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,OAAOC,OAAP,MAAoB,iBAApB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAClC,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,WAAjB;AAA8BC,IAAAA,WAA9B;AAA2CC,IAAAA;AAA3C,MAA0DP,OAAO,EAAvE;AAEAF,EAAAA,OAAO,CAAC,MAAM;AACZ,QAAIS,UAAJ,EAAgB;AACdR,MAAAA,GAAG,CAACS,YAAJ,CAAiBC,QAAjB,CAA0BC,GAA1B,CACGD,QAAD,IAAcA,QADhB,EAEE,MAAOE,KAAP,IAAiB;AACf,cAAMC,eAAe,GAAGD,KAAK,CAACE,MAA9B;;AACA,YACEF,KAAK,CAACF,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IACAF,eAAe,CAACG,GAAhB,KAAwB,qBAF1B,EAGE;AACA,iBAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCd,YAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,YAAAA,WAAW,CAAC,IAAD,CAAX;AACAD,YAAAA,WAAW,CAAC,IAAD,CAAX;AACAJ,YAAAA,OAAO,CAACkB,IAAR,CAAa,QAAb;AACAD,YAAAA,MAAM,CAACP,KAAD,CAAN;AACD,WANM,CAAP;AAOD;;AAED,YAAIA,KAAK,CAACF,QAAN,CAAeK,MAAf,KAA0B,GAA1B,IAAiC,CAACF,eAAe,CAACQ,MAAtD,EAA8D;AAC5D,cAAI;AACFR,YAAAA,eAAe,CAACQ,MAAhB,GAAyB,IAAzB;AACA,kBAAMC,GAAG,GAAG,MAAMtB,GAAG,CAACuB,IAAJ,CAAS,qBAAT,CAAlB;AACAC,YAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeL,GAAG,CAACM,IAAJ,CAASC,KAAxB,CAA9B;AACA,mBAAO7B,GAAG,CAACa,eAAD,CAAV;AACD,WALD,CAKE,OAAOD,KAAP,EAAc;AACdY,YAAAA,YAAY,CAACM,UAAb,CAAwB,OAAxB;AACAzB,YAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,YAAAA,WAAW,CAAC,IAAD,CAAX;AACAD,YAAAA,WAAW,CAAC,IAAD,CAAX;AACAJ,YAAAA,OAAO,CAACkB,IAAR,CAAa,QAAb;AACD;AACF;;AACD,eAAOH,OAAO,CAACE,MAAR,CAAeP,KAAf,CAAP;AACD,OAhCH;AAkCD;AACF,GArCM,EAqCJ,CAACJ,UAAD,EAAaD,WAAb,EAA0BF,aAA1B,EAAyCC,WAAzC,CArCI,CAAP;AAuCA,SAAOF,QAAP;AACD,CA3CD;;GAAMD,S;UAC4DF,O;;;KAD5DE,S;AA6CN,eAAeA,SAAf","sourcesContent":["import { useMemo } from \"react\";\nimport API from \"api/axios.config\";\nimport { useUser } from \"context/UserContext\";\nimport history from \"helpers/history\";\n\nconst WithAxios = ({ children }) => {\n  const { setIsLoggedIn, setUserData, setAuthData, isLoggedIn } = useUser();\n\n  useMemo(() => {\n    if (isLoggedIn) {\n      API.interceptors.response.use(\n        (response) => response,\n        async (error) => {\n          const originalRequest = error.config;\n          if (\n            error.response.status === 401 &&\n            originalRequest.url === \"/auth/refresh-token\"\n          ) {\n            return new Promise((resolve, reject) => {\n              setIsLoggedIn(false);\n              setAuthData(null);\n              setUserData(null);\n              history.push(\"/login\");\n              reject(error);\n            });\n          }\n\n          if (error.response.status === 401 && !originalRequest._retry) {\n            try {\n              originalRequest._retry = true;\n              const res = await API.post(\"/auth/refresh-token\");\n              localStorage.setItem(\"token\", JSON.stringify(res.data.token));\n              return API(originalRequest);\n            } catch (error) {\n              localStorage.removeItem(\"token\");\n              setIsLoggedIn(false);\n              setAuthData(null);\n              setUserData(null);\n              history.push(\"/login\");\n            }\n          }\n          return Promise.reject(error);\n        }\n      );\n    }\n  }, [isLoggedIn, setAuthData, setIsLoggedIn, setUserData]);\n\n  return children;\n};\n\nexport default WithAxios;\n"]},"metadata":{},"sourceType":"module"}